// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get data(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get claimant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LoanEnd extends ethereum.Event {
  get params(): LoanEnd__Params {
    return new LoanEnd__Params(this);
  }
}

export class LoanEnd__Params {
  _event: LoanEnd;

  constructor(event: LoanEnd) {
    this._event = event;
  }

  get data(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LoanLiquidateBid extends ethereum.Event {
  get params(): LoanLiquidateBid__Params {
    return new LoanLiquidateBid__Params(this);
  }
}

export class LoanLiquidateBid__Params {
  _event: LoanLiquidateBid;

  constructor(event: LoanLiquidateBid) {
    this._event = event;
  }

  get data(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get liquidationId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LoanLiquidateExit extends ethereum.Event {
  get params(): LoanLiquidateExit__Params {
    return new LoanLiquidateExit__Params(this);
  }
}

export class LoanLiquidateExit__Params {
  _event: LoanLiquidateExit;

  constructor(event: LoanLiquidateExit) {
    this._event = event;
  }

  get data(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get liquidator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get liquidationId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LoanLiquidateStart extends ethereum.Event {
  get params(): LoanLiquidateStart__Params {
    return new LoanLiquidateStart__Params(this);
  }
}

export class LoanLiquidateStart__Params {
  _event: LoanLiquidateStart;

  constructor(event: LoanLiquidateStart) {
    this._event = event;
  }

  get data(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get liquidationId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LoanPayment extends ethereum.Event {
  get params(): LoanPayment__Params {
    return new LoanPayment__Params(this);
  }
}

export class LoanPayment__Params {
  _event: LoanPayment;

  constructor(event: LoanPayment) {
    this._event = event;
  }

  get data(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LoanStart extends ethereum.Event {
  get params(): LoanStart__Params {
    return new LoanStart__Params(this);
  }
}

export class LoanStart__Params {
  _event: LoanStart;

  constructor(event: LoanStart) {
    this._event = event;
  }

  get data(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get data(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get minter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stakeId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class HDRN__calcLoanPaymentResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class HDRN__calcLoanPayoffResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class HDRN__dailyDataListResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    return map;
  }

  getDayMintedTotal(): BigInt {
    return this.value0;
  }

  getDayLoanedTotal(): BigInt {
    return this.value1;
  }

  getDayBurntTotal(): BigInt {
    return this.value2;
  }

  getDayInterestRate(): BigInt {
    return this.value3;
  }

  getDayMintMultiplier(): i32 {
    return this.value4;
  }
}

export class HDRN__liquidationListResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getLiquidationStart(): BigInt {
    return this.value0;
  }

  getHsiAddress(): Address {
    return this.value1;
  }

  getBidAmount(): BigInt {
    return this.value2;
  }

  getLiquidator(): Address {
    return this.value3;
  }

  getEndOffset(): BigInt {
    return this.value4;
  }

  getIsActive(): boolean {
    return this.value5;
  }
}

export class HDRN__shareListResultStakeStruct extends ethereum.Tuple {
  get stakeId(): BigInt {
    return this[0].toBigInt();
  }

  get stakeShares(): BigInt {
    return this[1].toBigInt();
  }

  get lockedDay(): i32 {
    return this[2].toI32();
  }

  get stakedDays(): i32 {
    return this[3].toI32();
  }
}

export class HDRN__shareListResult {
  value0: HDRN__shareListResultStakeStruct;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: BigInt;
  value6: i32;
  value7: boolean;

  constructor(
    value0: HDRN__shareListResultStakeStruct,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: BigInt,
    value6: i32,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getStake(): HDRN__shareListResultStakeStruct {
    return this.value0;
  }

  getMintedDays(): i32 {
    return this.value1;
  }

  getLaunchBonus(): i32 {
    return this.value2;
  }

  getLoanStart(): i32 {
    return this.value3;
  }

  getLoanedDays(): i32 {
    return this.value4;
  }

  getInterestRate(): BigInt {
    return this.value5;
  }

  getPaymentsMade(): i32 {
    return this.value6;
  }

  getIsLoaned(): boolean {
    return this.value7;
  }
}

export class HDRN extends ethereum.SmartContract {
  static bind(address: Address): HDRN {
    return new HDRN("HDRN", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcLoanPayment(
    borrower: Address,
    hsiIndex: BigInt,
    hsiAddress: Address
  ): HDRN__calcLoanPaymentResult {
    let result = super.call(
      "calcLoanPayment",
      "calcLoanPayment(address,uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromAddress(hsiAddress)
      ]
    );

    return new HDRN__calcLoanPaymentResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcLoanPayment(
    borrower: Address,
    hsiIndex: BigInt,
    hsiAddress: Address
  ): ethereum.CallResult<HDRN__calcLoanPaymentResult> {
    let result = super.tryCall(
      "calcLoanPayment",
      "calcLoanPayment(address,uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromAddress(hsiAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HDRN__calcLoanPaymentResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  calcLoanPayoff(
    borrower: Address,
    hsiIndex: BigInt,
    hsiAddress: Address
  ): HDRN__calcLoanPayoffResult {
    let result = super.call(
      "calcLoanPayoff",
      "calcLoanPayoff(address,uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromAddress(hsiAddress)
      ]
    );

    return new HDRN__calcLoanPayoffResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcLoanPayoff(
    borrower: Address,
    hsiIndex: BigInt,
    hsiAddress: Address
  ): ethereum.CallResult<HDRN__calcLoanPayoffResult> {
    let result = super.tryCall(
      "calcLoanPayoff",
      "calcLoanPayoff(address,uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromAddress(hsiAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HDRN__calcLoanPayoffResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  claimNative(stakeIndex: BigInt, stakeId: BigInt): BigInt {
    let result = super.call(
      "claimNative",
      "claimNative(uint256,uint40):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(stakeIndex),
        ethereum.Value.fromUnsignedBigInt(stakeId)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimNative(
    stakeIndex: BigInt,
    stakeId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimNative",
      "claimNative(uint256,uint40):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(stakeIndex),
        ethereum.Value.fromUnsignedBigInt(stakeId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentDay(): BigInt {
    let result = super.call("currentDay", "currentDay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentDay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentDay", "currentDay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dailyDataList(param0: BigInt): HDRN__dailyDataListResult {
    let result = super.call(
      "dailyDataList",
      "dailyDataList(uint256):(uint72,uint72,uint72,uint32,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new HDRN__dailyDataListResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32()
    );
  }

  try_dailyDataList(
    param0: BigInt
  ): ethereum.CallResult<HDRN__dailyDataListResult> {
    let result = super.tryCall(
      "dailyDataList",
      "dailyDataList(uint256):(uint72,uint72,uint72,uint32,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HDRN__dailyDataListResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32()
      )
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hsim(): Address {
    let result = super.call("hsim", "hsim():(address)", []);

    return result[0].toAddress();
  }

  try_hsim(): ethereum.CallResult<Address> {
    let result = super.tryCall("hsim", "hsim():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidationList(param0: BigInt): HDRN__liquidationListResult {
    let result = super.call(
      "liquidationList",
      "liquidationList(uint256):(uint256,address,uint96,address,uint88,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new HDRN__liquidationListResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_liquidationList(
    param0: BigInt
  ): ethereum.CallResult<HDRN__liquidationListResult> {
    let result = super.tryCall(
      "liquidationList",
      "liquidationList(uint256):(uint256,address,uint96,address,uint88,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HDRN__liquidationListResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }

  loanInstanced(hsiIndex: BigInt, hsiAddress: Address): BigInt {
    let result = super.call(
      "loanInstanced",
      "loanInstanced(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromAddress(hsiAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_loanInstanced(
    hsiIndex: BigInt,
    hsiAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "loanInstanced",
      "loanInstanced(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromAddress(hsiAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanLiquidate(owner: Address, hsiIndex: BigInt, hsiAddress: Address): BigInt {
    let result = super.call(
      "loanLiquidate",
      "loanLiquidate(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromAddress(hsiAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_loanLiquidate(
    owner: Address,
    hsiIndex: BigInt,
    hsiAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "loanLiquidate",
      "loanLiquidate(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromAddress(hsiAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanLiquidateBid(liquidationId: BigInt, liquidationBid: BigInt): BigInt {
    let result = super.call(
      "loanLiquidateBid",
      "loanLiquidateBid(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(liquidationId),
        ethereum.Value.fromUnsignedBigInt(liquidationBid)
      ]
    );

    return result[0].toBigInt();
  }

  try_loanLiquidateBid(
    liquidationId: BigInt,
    liquidationBid: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "loanLiquidateBid",
      "loanLiquidateBid(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(liquidationId),
        ethereum.Value.fromUnsignedBigInt(liquidationBid)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanLiquidateExit(hsiIndex: BigInt, liquidationId: BigInt): Address {
    let result = super.call(
      "loanLiquidateExit",
      "loanLiquidateExit(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromUnsignedBigInt(liquidationId)
      ]
    );

    return result[0].toAddress();
  }

  try_loanLiquidateExit(
    hsiIndex: BigInt,
    liquidationId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "loanLiquidateExit",
      "loanLiquidateExit(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromUnsignedBigInt(liquidationId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  loanPayment(hsiIndex: BigInt, hsiAddress: Address): BigInt {
    let result = super.call(
      "loanPayment",
      "loanPayment(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromAddress(hsiAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_loanPayment(
    hsiIndex: BigInt,
    hsiAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "loanPayment",
      "loanPayment(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromAddress(hsiAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanPayoff(hsiIndex: BigInt, hsiAddress: Address): BigInt {
    let result = super.call(
      "loanPayoff",
      "loanPayoff(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromAddress(hsiAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_loanPayoff(
    hsiIndex: BigInt,
    hsiAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "loanPayoff",
      "loanPayoff(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromAddress(hsiAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanedSupply(): BigInt {
    let result = super.call("loanedSupply", "loanedSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_loanedSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("loanedSupply", "loanedSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintInstanced(hsiIndex: BigInt, hsiAddress: Address): BigInt {
    let result = super.call(
      "mintInstanced",
      "mintInstanced(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromAddress(hsiAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintInstanced(
    hsiIndex: BigInt,
    hsiAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintInstanced",
      "mintInstanced(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(hsiIndex),
        ethereum.Value.fromAddress(hsiAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintNative(stakeIndex: BigInt, stakeId: BigInt): BigInt {
    let result = super.call(
      "mintNative",
      "mintNative(uint256,uint40):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(stakeIndex),
        ethereum.Value.fromUnsignedBigInt(stakeId)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintNative(
    stakeIndex: BigInt,
    stakeId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintNative",
      "mintNative(uint256,uint40):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(stakeIndex),
        ethereum.Value.fromUnsignedBigInt(stakeId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  shareList(param0: BigInt): HDRN__shareListResult {
    let result = super.call(
      "shareList",
      "shareList(uint256):((uint40,uint72,uint16,uint16),uint16,uint8,uint16,uint16,uint32,uint8,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return changetype<HDRN__shareListResult>(
      new HDRN__shareListResult(
        changetype<HDRN__shareListResultStakeStruct>(result[0].toTuple()),
        result[1].toI32(),
        result[2].toI32(),
        result[3].toI32(),
        result[4].toI32(),
        result[5].toBigInt(),
        result[6].toI32(),
        result[7].toBoolean()
      )
    );
  }

  try_shareList(param0: BigInt): ethereum.CallResult<HDRN__shareListResult> {
    let result = super.tryCall(
      "shareList",
      "shareList(uint256):((uint40,uint72,uint16,uint16),uint16,uint8,uint16,uint16,uint32,uint8,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<HDRN__shareListResult>(
        new HDRN__shareListResult(
          changetype<HDRN__shareListResultStakeStruct>(value[0].toTuple()),
          value[1].toI32(),
          value[2].toI32(),
          value[3].toI32(),
          value[4].toI32(),
          value[5].toBigInt(),
          value[6].toI32(),
          value[7].toBoolean()
        )
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get hexAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get hexLaunch(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimInstancedCall extends ethereum.Call {
  get inputs(): ClaimInstancedCall__Inputs {
    return new ClaimInstancedCall__Inputs(this);
  }

  get outputs(): ClaimInstancedCall__Outputs {
    return new ClaimInstancedCall__Outputs(this);
  }
}

export class ClaimInstancedCall__Inputs {
  _call: ClaimInstancedCall;

  constructor(call: ClaimInstancedCall) {
    this._call = call;
  }

  get hsiIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get hsiAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get hsiStarterAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ClaimInstancedCall__Outputs {
  _call: ClaimInstancedCall;

  constructor(call: ClaimInstancedCall) {
    this._call = call;
  }
}

export class ClaimNativeCall extends ethereum.Call {
  get inputs(): ClaimNativeCall__Inputs {
    return new ClaimNativeCall__Inputs(this);
  }

  get outputs(): ClaimNativeCall__Outputs {
    return new ClaimNativeCall__Outputs(this);
  }
}

export class ClaimNativeCall__Inputs {
  _call: ClaimNativeCall;

  constructor(call: ClaimNativeCall) {
    this._call = call;
  }

  get stakeIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get stakeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimNativeCall__Outputs {
  _call: ClaimNativeCall;

  constructor(call: ClaimNativeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LoanInstancedCall extends ethereum.Call {
  get inputs(): LoanInstancedCall__Inputs {
    return new LoanInstancedCall__Inputs(this);
  }

  get outputs(): LoanInstancedCall__Outputs {
    return new LoanInstancedCall__Outputs(this);
  }
}

export class LoanInstancedCall__Inputs {
  _call: LoanInstancedCall;

  constructor(call: LoanInstancedCall) {
    this._call = call;
  }

  get hsiIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get hsiAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class LoanInstancedCall__Outputs {
  _call: LoanInstancedCall;

  constructor(call: LoanInstancedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LoanLiquidateCall extends ethereum.Call {
  get inputs(): LoanLiquidateCall__Inputs {
    return new LoanLiquidateCall__Inputs(this);
  }

  get outputs(): LoanLiquidateCall__Outputs {
    return new LoanLiquidateCall__Outputs(this);
  }
}

export class LoanLiquidateCall__Inputs {
  _call: LoanLiquidateCall;

  constructor(call: LoanLiquidateCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get hsiIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get hsiAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class LoanLiquidateCall__Outputs {
  _call: LoanLiquidateCall;

  constructor(call: LoanLiquidateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LoanLiquidateBidCall extends ethereum.Call {
  get inputs(): LoanLiquidateBidCall__Inputs {
    return new LoanLiquidateBidCall__Inputs(this);
  }

  get outputs(): LoanLiquidateBidCall__Outputs {
    return new LoanLiquidateBidCall__Outputs(this);
  }
}

export class LoanLiquidateBidCall__Inputs {
  _call: LoanLiquidateBidCall;

  constructor(call: LoanLiquidateBidCall) {
    this._call = call;
  }

  get liquidationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get liquidationBid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LoanLiquidateBidCall__Outputs {
  _call: LoanLiquidateBidCall;

  constructor(call: LoanLiquidateBidCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LoanLiquidateExitCall extends ethereum.Call {
  get inputs(): LoanLiquidateExitCall__Inputs {
    return new LoanLiquidateExitCall__Inputs(this);
  }

  get outputs(): LoanLiquidateExitCall__Outputs {
    return new LoanLiquidateExitCall__Outputs(this);
  }
}

export class LoanLiquidateExitCall__Inputs {
  _call: LoanLiquidateExitCall;

  constructor(call: LoanLiquidateExitCall) {
    this._call = call;
  }

  get hsiIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get liquidationId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LoanLiquidateExitCall__Outputs {
  _call: LoanLiquidateExitCall;

  constructor(call: LoanLiquidateExitCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class LoanPaymentCall extends ethereum.Call {
  get inputs(): LoanPaymentCall__Inputs {
    return new LoanPaymentCall__Inputs(this);
  }

  get outputs(): LoanPaymentCall__Outputs {
    return new LoanPaymentCall__Outputs(this);
  }
}

export class LoanPaymentCall__Inputs {
  _call: LoanPaymentCall;

  constructor(call: LoanPaymentCall) {
    this._call = call;
  }

  get hsiIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get hsiAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class LoanPaymentCall__Outputs {
  _call: LoanPaymentCall;

  constructor(call: LoanPaymentCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LoanPayoffCall extends ethereum.Call {
  get inputs(): LoanPayoffCall__Inputs {
    return new LoanPayoffCall__Inputs(this);
  }

  get outputs(): LoanPayoffCall__Outputs {
    return new LoanPayoffCall__Outputs(this);
  }
}

export class LoanPayoffCall__Inputs {
  _call: LoanPayoffCall;

  constructor(call: LoanPayoffCall) {
    this._call = call;
  }

  get hsiIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get hsiAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class LoanPayoffCall__Outputs {
  _call: LoanPayoffCall;

  constructor(call: LoanPayoffCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintInstancedCall extends ethereum.Call {
  get inputs(): MintInstancedCall__Inputs {
    return new MintInstancedCall__Inputs(this);
  }

  get outputs(): MintInstancedCall__Outputs {
    return new MintInstancedCall__Outputs(this);
  }
}

export class MintInstancedCall__Inputs {
  _call: MintInstancedCall;

  constructor(call: MintInstancedCall) {
    this._call = call;
  }

  get hsiIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get hsiAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintInstancedCall__Outputs {
  _call: MintInstancedCall;

  constructor(call: MintInstancedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintNativeCall extends ethereum.Call {
  get inputs(): MintNativeCall__Inputs {
    return new MintNativeCall__Inputs(this);
  }

  get outputs(): MintNativeCall__Outputs {
    return new MintNativeCall__Outputs(this);
  }
}

export class MintNativeCall__Inputs {
  _call: MintNativeCall;

  constructor(call: MintNativeCall) {
    this._call = call;
  }

  get stakeIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get stakeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintNativeCall__Outputs {
  _call: MintNativeCall;

  constructor(call: MintNativeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ProofOfBenevolenceCall extends ethereum.Call {
  get inputs(): ProofOfBenevolenceCall__Inputs {
    return new ProofOfBenevolenceCall__Inputs(this);
  }

  get outputs(): ProofOfBenevolenceCall__Outputs {
    return new ProofOfBenevolenceCall__Outputs(this);
  }
}

export class ProofOfBenevolenceCall__Inputs {
  _call: ProofOfBenevolenceCall;

  constructor(call: ProofOfBenevolenceCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProofOfBenevolenceCall__Outputs {
  _call: ProofOfBenevolenceCall;

  constructor(call: ProofOfBenevolenceCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
