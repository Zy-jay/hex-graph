// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Owner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Owner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Owner must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Owner", id.toString(), this);
    }
  }

  static load(id: string): Owner | null {
    return changetype<Owner | null>(store.get("Owner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hasMintedHdrn(): boolean {
    let value = this.get("hasMintedHdrn");
    return value!.toBoolean();
  }

  set hasMintedHdrn(value: boolean) {
    this.set("hasMintedHdrn", Value.fromBoolean(value));
  }

  get hasMintedMaxi(): boolean {
    let value = this.get("hasMintedMaxi");
    return value!.toBoolean();
  }

  set hasMintedMaxi(value: boolean) {
    this.set("hasMintedMaxi", Value.fromBoolean(value));
  }

  get hasMintedPlsd(): boolean {
    let value = this.get("hasMintedPlsd");
    return value!.toBoolean();
  }

  set hasMintedPlsd(value: boolean) {
    this.set("hasMintedPlsd", Value.fromBoolean(value));
  }

  get hexStakes(): Array<string> | null {
    let value = this.get("hexStakes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set hexStakes(value: Array<string> | null) {
    if (!value) {
      this.unset("hexStakes");
    } else {
      this.set("hexStakes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get hdrnMintAmount(): BigInt | null {
    let value = this.get("hdrnMintAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set hdrnMintAmount(value: BigInt | null) {
    if (!value) {
      this.unset("hdrnMintAmount");
    } else {
      this.set("hdrnMintAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxiMintAmount(): BigInt | null {
    let value = this.get("maxiMintAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxiMintAmount(value: BigInt | null) {
    if (!value) {
      this.unset("maxiMintAmount");
    } else {
      this.set("maxiMintAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get plsdMintAmount(): BigInt | null {
    let value = this.get("plsdMintAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set plsdMintAmount(value: BigInt | null) {
    if (!value) {
      this.unset("plsdMintAmount");
    } else {
      this.set("plsdMintAmount", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class HEXStake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HEXStake entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HEXStake must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HEXStake", id.toString(), this);
    }
  }

  static load(id: string): HEXStake | null {
    return changetype<HEXStake | null>(store.get("HEXStake", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get previousOwners(): Array<string> | null {
    let value = this.get("previousOwners");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set previousOwners(value: Array<string> | null) {
    if (!value) {
      this.unset("previousOwners");
    } else {
      this.set("previousOwners", Value.fromStringArray(<Array<string>>value));
    }
  }

  get stakeId(): BigInt {
    let value = this.get("stakeId");
    return value!.toBigInt();
  }

  set stakeId(value: BigInt) {
    this.set("stakeId", Value.fromBigInt(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value!.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get isBtcFreeClaim(): boolean {
    let value = this.get("isBtcFreeClaim");
    return value!.toBoolean();
  }

  set isBtcFreeClaim(value: boolean) {
    this.set("isBtcFreeClaim", Value.fromBoolean(value));
  }

  get isGoodAccounted(): boolean {
    let value = this.get("isGoodAccounted");
    return value!.toBoolean();
  }

  set isGoodAccounted(value: boolean) {
    this.set("isGoodAccounted", Value.fromBoolean(value));
  }

  get isHdrnHsi(): boolean {
    let value = this.get("isHdrnHsi");
    return value!.toBoolean();
  }

  set isHdrnHsi(value: boolean) {
    this.set("isHdrnHsi", Value.fromBoolean(value));
  }

  get isHdrnHsiTokenized(): boolean {
    let value = this.get("isHdrnHsiTokenized");
    return value!.toBoolean();
  }

  set isHdrnHsiTokenized(value: boolean) {
    this.set("isHdrnHsiTokenized", Value.fromBoolean(value));
  }

  get stakeAmount(): BigInt {
    let value = this.get("stakeAmount");
    return value!.toBigInt();
  }

  set stakeAmount(value: BigInt) {
    this.set("stakeAmount", Value.fromBigInt(value));
  }

  get stakeShares(): BigInt {
    let value = this.get("stakeShares");
    return value!.toBigInt();
  }

  set stakeShares(value: BigInt) {
    this.set("stakeShares", Value.fromBigInt(value));
  }

  get stakedDays(): BigInt {
    let value = this.get("stakedDays");
    return value!.toBigInt();
  }

  set stakedDays(value: BigInt) {
    this.set("stakedDays", Value.fromBigInt(value));
  }

  get stakeStartDay(): BigInt {
    let value = this.get("stakeStartDay");
    return value!.toBigInt();
  }

  set stakeStartDay(value: BigInt) {
    this.set("stakeStartDay", Value.fromBigInt(value));
  }

  get stakeEndDayScheduled(): BigInt {
    let value = this.get("stakeEndDayScheduled");
    return value!.toBigInt();
  }

  set stakeEndDayScheduled(value: BigInt) {
    this.set("stakeEndDayScheduled", Value.fromBigInt(value));
  }

  get stakeEndDayActual(): BigInt | null {
    let value = this.get("stakeEndDayActual");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakeEndDayActual(value: BigInt | null) {
    if (!value) {
      this.unset("stakeEndDayActual");
    } else {
      this.set("stakeEndDayActual", Value.fromBigInt(<BigInt>value));
    }
  }

  get stakePayout(): BigInt | null {
    let value = this.get("stakePayout");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakePayout(value: BigInt | null) {
    if (!value) {
      this.unset("stakePayout");
    } else {
      this.set("stakePayout", Value.fromBigInt(<BigInt>value));
    }
  }

  get stakePenalty(): BigInt | null {
    let value = this.get("stakePenalty");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakePenalty(value: BigInt | null) {
    if (!value) {
      this.unset("stakePenalty");
    } else {
      this.set("stakePenalty", Value.fromBigInt(<BigInt>value));
    }
  }

  get hdrnLaunchBonus(): BigInt {
    let value = this.get("hdrnLaunchBonus");
    return value!.toBigInt();
  }

  set hdrnLaunchBonus(value: BigInt) {
    this.set("hdrnLaunchBonus", Value.fromBigInt(value));
  }

  get hdrnMintedDays(): BigInt {
    let value = this.get("hdrnMintedDays");
    return value!.toBigInt();
  }

  set hdrnMintedDays(value: BigInt) {
    this.set("hdrnMintedDays", Value.fromBigInt(value));
  }

  get hdrnHsiAddress(): Bytes | null {
    let value = this.get("hdrnHsiAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set hdrnHsiAddress(value: Bytes | null) {
    if (!value) {
      this.unset("hdrnHsiAddress");
    } else {
      this.set("hdrnHsiAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get hdrnHsiTokenId(): BigInt | null {
    let value = this.get("hdrnHsiTokenId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set hdrnHsiTokenId(value: BigInt | null) {
    if (!value) {
      this.unset("hdrnHsiTokenId");
    } else {
      this.set("hdrnHsiTokenId", Value.fromBigInt(<BigInt>value));
    }
  }

  get hdrnLoan(): string | null {
    let value = this.get("hdrnLoan");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set hdrnLoan(value: string | null) {
    if (!value) {
      this.unset("hdrnLoan");
    } else {
      this.set("hdrnLoan", Value.fromString(<string>value));
    }
  }
}

export class HDRNLoan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HDRNLoan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HDRNLoan must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HDRNLoan", id.toString(), this);
    }
  }

  static load(id: string): HDRNLoan | null {
    return changetype<HDRNLoan | null>(store.get("HDRNLoan", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hexStake(): string {
    let value = this.get("hexStake");
    return value!.toString();
  }

  set hexStake(value: string) {
    this.set("hexStake", Value.fromString(value));
  }

  get borrower(): string | null {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set borrower(value: string | null) {
    if (!value) {
      this.unset("borrower");
    } else {
      this.set("borrower", Value.fromString(<string>value));
    }
  }

  get previousBorrowers(): Array<string> | null {
    let value = this.get("previousBorrowers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set previousBorrowers(value: Array<string> | null) {
    if (!value) {
      this.unset("previousBorrowers");
    } else {
      this.set(
        "previousBorrowers",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get previousLoanAmounts(): Array<BigInt> | null {
    let value = this.get("previousLoanAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set previousLoanAmounts(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("previousLoanAmounts");
    } else {
      this.set(
        "previousLoanAmounts",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get previousPaymentsMade(): Array<BigInt> | null {
    let value = this.get("previousPaymentsMade");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set previousPaymentsMade(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("previousPaymentsMade");
    } else {
      this.set(
        "previousPaymentsMade",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get previousLoanEndEvent(): Array<string> | null {
    let value = this.get("previousLoanEndEvent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set previousLoanEndEvent(value: Array<string> | null) {
    if (!value) {
      this.unset("previousLoanEndEvent");
    } else {
      this.set(
        "previousLoanEndEvent",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value!.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get loanStartDay(): BigInt {
    let value = this.get("loanStartDay");
    return value!.toBigInt();
  }

  set loanStartDay(value: BigInt) {
    this.set("loanStartDay", Value.fromBigInt(value));
  }

  get loanAmount(): BigInt {
    let value = this.get("loanAmount");
    return value!.toBigInt();
  }

  set loanAmount(value: BigInt) {
    this.set("loanAmount", Value.fromBigInt(value));
  }

  get loanedDays(): BigInt {
    let value = this.get("loanedDays");
    return value!.toBigInt();
  }

  set loanedDays(value: BigInt) {
    this.set("loanedDays", Value.fromBigInt(value));
  }

  get interestRate(): BigInt {
    let value = this.get("interestRate");
    return value!.toBigInt();
  }

  set interestRate(value: BigInt) {
    this.set("interestRate", Value.fromBigInt(value));
  }

  get paymentsMade(): BigInt {
    let value = this.get("paymentsMade");
    return value!.toBigInt();
  }

  set paymentsMade(value: BigInt) {
    this.set("paymentsMade", Value.fromBigInt(value));
  }

  get paymentDueDay(): BigInt {
    let value = this.get("paymentDueDay");
    return value!.toBigInt();
  }

  set paymentDueDay(value: BigInt) {
    this.set("paymentDueDay", Value.fromBigInt(value));
  }

  get liquidationDay(): BigInt {
    let value = this.get("liquidationDay");
    return value!.toBigInt();
  }

  set liquidationDay(value: BigInt) {
    this.set("liquidationDay", Value.fromBigInt(value));
  }

  get liquidations(): Array<string> | null {
    let value = this.get("liquidations");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquidations(value: Array<string> | null) {
    if (!value) {
      this.unset("liquidations");
    } else {
      this.set("liquidations", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class HDRNLiquidation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HDRNLiquidation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HDRNLiquidation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HDRNLiquidation", id.toString(), this);
    }
  }

  static load(id: string): HDRNLiquidation | null {
    return changetype<HDRNLiquidation | null>(store.get("HDRNLiquidation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get loan(): string {
    let value = this.get("loan");
    return value!.toString();
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get borrower(): string {
    let value = this.get("borrower");
    return value!.toString();
  }

  set borrower(value: string) {
    this.set("borrower", Value.fromString(value));
  }

  get liquidationId(): BigInt {
    let value = this.get("liquidationId");
    return value!.toBigInt();
  }

  set liquidationId(value: BigInt) {
    this.set("liquidationId", Value.fromBigInt(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value!.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get liquidationStart(): BigInt {
    let value = this.get("liquidationStart");
    return value!.toBigInt();
  }

  set liquidationStart(value: BigInt) {
    this.set("liquidationStart", Value.fromBigInt(value));
  }

  get liquidationExtension(): BigInt | null {
    let value = this.get("liquidationExtension");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidationExtension(value: BigInt | null) {
    if (!value) {
      this.unset("liquidationExtension");
    } else {
      this.set("liquidationExtension", Value.fromBigInt(<BigInt>value));
    }
  }

  get currentBid(): BigInt {
    let value = this.get("currentBid");
    return value!.toBigInt();
  }

  set currentBid(value: BigInt) {
    this.set("currentBid", Value.fromBigInt(value));
  }

  get currentBidder(): string {
    let value = this.get("currentBidder");
    return value!.toString();
  }

  set currentBidder(value: string) {
    this.set("currentBidder", Value.fromString(value));
  }

  get currentBidPlaced(): BigInt {
    let value = this.get("currentBidPlaced");
    return value!.toBigInt();
  }

  set currentBidPlaced(value: BigInt) {
    this.set("currentBidPlaced", Value.fromBigInt(value));
  }

  get previousBids(): Array<BigInt> | null {
    let value = this.get("previousBids");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set previousBids(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("previousBids");
    } else {
      this.set("previousBids", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get previousBidders(): Array<string> | null {
    let value = this.get("previousBidders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set previousBidders(value: Array<string> | null) {
    if (!value) {
      this.unset("previousBidders");
    } else {
      this.set("previousBidders", Value.fromStringArray(<Array<string>>value));
    }
  }

  get previousBidsPlaced(): Array<BigInt> | null {
    let value = this.get("previousBidsPlaced");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set previousBidsPlaced(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("previousBidsPlaced");
    } else {
      this.set(
        "previousBidsPlaced",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }
}
